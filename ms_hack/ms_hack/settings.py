"""
Django settings for ms_hack project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
from pathlib import Path
from decouple import config
from datetime import timedelta
import os

import pymysql
pymysql.install_as_MySQLdb()


ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'www.openddm.store', 'openddm.store']
CSRF_TRUSTED_ORIGINS = ['https://www.openddm.store', 'https://openddm.store']

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:3000",
    "https://www.openddm.store",
    "https://openddm.store",
]

KMA_API_KEY = config("KMA_API_KEY")
GOOGLE_APPLICATION_CREDENTIALS = config("GOOGLE_APPLICATION_CREDENTIALS")

# 최대 업로드 크기 (예: 50MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = None  # 무제한
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ['127.0.0.1','43.201.117.104','openddm.store','www.openddm.store']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',                  # djangorestframework
    'rest_framework.authtoken',         # djangorestframework (optional, 권장)
    'rest_framework_simplejwt.token_blacklist',  # djangorestframework_simplejwt (optional, 권장)
    'dj_rest_auth',                    # dj-rest-auth
    'dj_rest_auth.registration',
    'allauth',                         # django-allauth
    'allauth.account',                 # django-allauth
    'allauth.socialaccount',           # django-allauth
    
    'drf_yasg',                        # drf-yasg
    'corsheaders',
    # simple-jwt 관련
    'rest_framework_simplejwt',
    'storages',
    'drf_spectacular',
    'Chatbot',
    'Community',
    'mainpage',
    'Traffic',
    'Weather',
    'django_crontab',
    'shelter',
    'google',
    'User',
]

AUTH_USER_MODEL = 'User.User'  # 커스텀 유저 모델을 사용합니다.


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication', # 토큰 인증을 추가합니다.
        'rest_framework.authentication.SessionAuthentication', # DRF의 browsable API를 위해 유지합니다.
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

CRONJOBS = [
    ('0 * * * *', 'Weather.cron.update_weather_data')
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'ms_hack.urls'

SITE_ID = 1

ACCOUNT_LOGIN_METHODS = {"username", "email"}
ACCOUNT_SIGNUP_FIELDS = ["username", "email*", "password1", "password2"]
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', cast=int, default=1025)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=False)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ms_hack.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import pymysql

import pymysql
from decouple import config

# pymysql을 MySQLdb로 대체
pymysql.install_as_MySQLdb()

# DATABASES 설정
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),  # DB 이름
        'USER': config('DB_USER'),  # DB 사용자
        'PASSWORD': config('DB_PASSWORD'),  # DB 비밀번호
        'HOST': config('DB_HOST'),  # DB 엔드포인트
        'PORT': int(config('DB_PORT', default=3306)),  # 포트 (int로 변환)
    }
}


AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_REGION = 'ap-northeast-2'
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_REGION}.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

TMAP_APP_KEY = config("TMAP_APP_KEY")

try:
    from .local_settings import *
except ImportError:
    pass